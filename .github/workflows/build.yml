# Build テスト、ビルドのフローを自動化
# トリガー: 全ブランチに対するPR
name: Build

on:
  pull_request:
    branches:
      - '*'

jobs:
  # static-check: fmt, lint
  static-check:
    name: StaticCheck
    runs-on: ubuntu-latest

    steps:
      # set up go
      - name: Set up Go 1.12
        uses: actions/setup-go@v1
        with:
          go-version: 1.12
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        
      # Run fmt
      - name: Go fmt
        run: |
          GO111MODULE=off go get -u golang.org/x/tools/cmd/goimports
          gofmt -s -w pkg/
          ~/go/bin/goimports -w pkg/

      # Run lint
      - name: Go Lint
        run: |
          GO111MODULE=off go get -u golang.org/x/lint/golint
          ~/go/bin/golint pkg/...

  # build test and build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ static-check ]

    services:
      # testにmysqlが必要なので
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping -h localhost" --health-interval 20s --health-timeout 10s --health-retries 10
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: todone

    steps:

    # set up go
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    # Create env files
    - name: Create env file
      run: |
        cp .env_example .env
        cp sqlboiler_example.toml sqlboiler.toml

    # Run ddl
    - name: Run DDL
      run: |
        mysql --protocol=tcp -u root -ppassword todone < ./db/mysql/ddl/ddl.sql

    # cache
    - name: Cache go module
      uses: actions/cache@v1
      id: cache-go
      with:
        path: ~/go/pkg/mod
        key: ${{env.cache-version}}-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # install packages
    - name: Get dependencies
      if: ${{ steps.cache-go.outputs.cache-hit }} != 'true'
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    
    # run test
    - name: Test
      run: go test -v ./...

    # build
    - name: Build
      run: go build -v ./cmd/main.go ./cmd/wire_gen.go 
