// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/usecase/board/interactor.go

// Package mock_board is a generated GoMock package.
package mock_board

import (
	reflect "reflect"
	entity "todone/pkg/domain/entity"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockInteractor is a mock of Interactor interface
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// CreateNewBoard mocks base method
func (m *MockInteractor) CreateNewBoard(ctx *gin.Context, accessToken, title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBoard", ctx, accessToken, title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewBoard indicates an expected call of CreateNewBoard
func (mr *MockInteractorMockRecorder) CreateNewBoard(ctx, accessToken, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBoard", reflect.TypeOf((*MockInteractor)(nil).CreateNewBoard), ctx, accessToken, title, description)
}

// GetBoardDetail mocks base method
func (m *MockInteractor) GetBoardDetail(ctx *gin.Context, id int) (*entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardDetail", ctx, id)
	ret0, _ := ret[0].(*entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardDetail indicates an expected call of GetBoardDetail
func (mr *MockInteractorMockRecorder) GetBoardDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardDetail", reflect.TypeOf((*MockInteractor)(nil).GetBoardDetail), ctx, id)
}

// GetUserBoards mocks base method
func (m *MockInteractor) GetUserBoards(ctx *gin.Context, accessToken string) (entity.BoardSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBoards", ctx, accessToken)
	ret0, _ := ret[0].(entity.BoardSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBoards indicates an expected call of GetUserBoards
func (mr *MockInteractorMockRecorder) GetUserBoards(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBoards", reflect.TypeOf((*MockInteractor)(nil).GetUserBoards), ctx, accessToken)
}

// GetAll mocks base method
func (m *MockInteractor) GetAll(ctx *gin.Context) (entity.BoardSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(entity.BoardSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockInteractorMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockInteractor)(nil).GetAll), ctx)
}
