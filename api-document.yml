# TODO: カードの移動エンドポイントを作れ！！！！
openapi: 3.0.0
info:
  title: 'TODONE api server'
  description: 'TODONEのAPIサーバ'
  version: '1.0.0'

tags:
  - name: 'user'
    description: 'ユーザ関連'
  - name: 'board'
    description: 'ボード関連'
  - name: 'kanban'
    description: 'カンバン関連'
  - name: 'card'
    description: 'カード関連'
  - name: 'label'
    description: 'ラベル関連'

paths:
  # account ----------
  /users:
    post:
      tags:
        - 'user'
      summary: '新規ユーザの作成'
      description: '新規ユーザを作成します。サーバ側で保持するユーザIDを発行して返却します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        '200':
          description: '作成したユーザの情報を返却する'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /users/self:
    get:
      tags:
        - 'user'
      summary: '自身のユーザ情報を取得'
      description: 'ユーザの情報を取得します。ユーザの判別はAuthヘッダのトークンから行います。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
      responses:
        '200':
          description: 'ユーザ情報を返却する'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - 'user'
      summary: '自身のユーザ情報を更新'
      description: 'ユーザの情報を更新します。ユーザの判別はAuthヘッダのトークンから行います。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        '200':
          description: '更新後のユーザ情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # boards ----------
  /boards:
    get:
      tags:
        - 'board'
      summary: 'ボードの一覧取得'
      description: 'リクエストユーザが参加しているボードを全て取得します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
      responses:
        '200':
          description: 'リクエストユーザが参加しているボードを全て返却する。'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - 'board'
      summary: '新規ボードの作成'
      description: '新しくボードを作成します。成功した場合、作成したボードの情報を返却します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
      requestBody:
        $ref: '#/components/requestBodies/UpdateBoard'
      responses:
        '200':
          description: '作成したボードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}:
    get:
      tags:
        - 'board'
      summary: 'ボード情報を取得'
      description: '指定されたボードの情報を取得します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '200':
          description: '指定されたボードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - 'board'
      summary: 'ボード情報の更新'
      description: '指定されたボードの情報を更新します。'
      parameters:
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/AccessToken'
      requestBody:
        $ref: '#/components/requestBodies/UpdateBoard'
      responses:
        '200':
          description: '更新されたボード情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'board'
      summary: 'ボードの削除'
      description: '指定されたボードを削除します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/members:
    post:
      tags:
        - 'board'
      summary: 'ボードを指定して参加'
      description: '指定したボードのメンバーにリクエストユーザを追加します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '200':
          description: '参加したボードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'board'
      summary: 'ボードから退出'
      description: '指定したボードのメンバーからリクエストユーザを削除します。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/members/{user_id}:
    put:
      tags:
        - 'board'
      summary: 'メンバーの権限を変更'
      description: '指定したメンバーのroleを変更します。リクエストユーザはadmin(role=1)である必要があります。'
      parameters:
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/BoardID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateRole'
      responses:
        '200':
          description: '変更後のボードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/archive:
    post:
      tags:
        - 'board'
      summary: 'ボードをアーカイブする'
      description: 'ボードをアーカイブします。リクエストユーザはadmin(role=1)である必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '200':
          description: '変更後のボードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'board'
      summary: 'ボードのアーカイブを解除'
      description: 'ボードのアーカイブを解除します。リクエストユーザはadmin(role=1)である必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  # kanban ----------------
  /boards/{board_id}/kanbans:
    get:
      tags:
        - 'kanban'
      summary: 'カンバンの一覧を取得'
      description: '指定したボードが保有するカンバンの一覧を取得します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '200':
          description: 'カンバンの一覧を返却する。'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/GetKanbanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - 'kanban'
      summary: 'カンバンの新規作成'
      description: 'カンバンを新しく作成します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateKanban'
      responses:
        '200':
          description: '作成したカンバンの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKanbanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      
  /boards/{board_id}/kanbans/{kanban_id}:
    get:
      tags:
        - 'kanban'
      summary: '指定したカンバンの情報を取得'
      description: '指定したカンバンの情報を取得します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      responses:
        '200':
          description: '指定したカンバンの情報を返却する。'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/GetKanbanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - 'kanban'
      summary: 'カンバンの情報を更新'
      description: '指定したカンバンの情報を更新します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateKanban'
      responses:
        '200':
          description: '更新後のカンバンの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKanbanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'kanban'
      summary: '指定したカンバンの削除'
      description: '指定したカンバンの削除を行います。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/kanbans/{kanban_id}/archive:
    post:
      tags:
        - 'kanban'
      summary: 'カンバンをアーカイブ'
      description: '指定したカンバンをアーカイブします。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateKanban'
      responses:
        '200':
          description: '更新後のカンバンの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKanbanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'kanban'
      summary: 'カンバンのアーカイブを解除'
      description: '指定したカンバンのアーカイブを解除します。リクエストユーザはボードのメンバーである必要があります。。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  # card -----------
  /boards/{board_id}/kanbans/{kanban_id}/cards:
    get:
      tags:
        - 'card'
      summary: 'カード一覧の取得'
      description: '指定したカンバンが保有しているカードの一覧を取得します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      responses:
        '200':
          description: 'カードの一覧を返却する。'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/GetCardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - 'card'
      summary: 'カードの新規作成'
      description: '指定したカンバンが保有するカードを作成することができます。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCard'
      responses:
        '200':
          description: '作成したカードの情報を返却する'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
  /boards/{board_id}/kanbans/{kanban_id}/cards/{card_id}:
    get:
      tags:
        - 'card'
      summary: 'カードの情報を取得'
      description: '指定したカードの情報を取得します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
      responses:
        '200':
          description: 'カードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - 'card'
      summary: 'カードの更新'
      description: '指定したカードの情報を更新します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCard'
      responses:
        '200':
          description: '更新後のカードの情報を返却します。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'card'
      summary: 'カードの削除'
      description: '指定したカードを削除します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/kanbans/{kanban_id}/cards/{card_id}/archive:
    post:
      tags:
        - 'card'
      summary: 'カードのアーカイブ'
      description: 'カードをアーカイブします。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
      responses:
        '200':
          description: '更新後のカードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'card'
      summary: 'カードのアーカイブを解除'
      description: '指定したカードのアーカイブを解除します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/kanbans/{kanban_id}/cards/{card_id}/labels:
    post:
      tags:
        - 'card'
      summary: 'カードにラベルを付加'
      description: '指定したカードにラベルを付加します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCardLabel'
      responses:
        '200':
          description: '更新後のカードの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCardResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'card'
      summary: 'カードのラベルを除去'
      description: '指定したカードから、指定したラベルを除去します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/KanbanID'
        - $ref: '#/components/parameters/CardID'
        - $ref: '#/components/parameters/LabelID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  # label ----------
  /boards/{board_id}/labels:
    get:
      tags:
        - 'label'
      summary: 'ボード内で使えるラベルの取得'
      description: '指定したボードで使用できるラベルの一覧を取得します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      responses:
        '200':
          description: 'ラベルの一覧を返却する。'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/GetLabelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - 'label'
      summary: 'ラベルの新規作成'
      description: '指定したボードで使うことができるラベルを作成します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateLabel'
      responses:
        '200':
          description: '作成したラベルを返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLabelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /boards/{board_id}/labels/{label_id}:
    put:
      tags:
        - 'label'
      summary: 'ラベルの更新'
      description: '指定したラベルの情報を更新します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/LabelID'
      requestBody: 
        $ref: '#/components/requestBodies/UpdateLabel'
      responses:
        '200':
          description: '更新後のラベルの情報を返却する。'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLabelResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - 'label'
      summary: 'ラベルの削除'
      description: '指定したラベルを削除します。リクエストユーザはボードのメンバーである必要があります。'
      parameters:
        - $ref: '#/components/parameters/AccessToken'
        - $ref: '#/components/parameters/BoardID'
        - $ref: '#/components/parameters/LabelID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    GetUserResponse:
      type: 'object'
      properties:
        id:
          type: 'integer'
          description: 'サーバが保持するユーザID'
          example: 1
        name:
          type: 'string'
          example: '田中太郎'
          description: '表示名'
        thumbnail:
          type: 'string'
          description: 'サムネ画像のリンク'
          example: 'http://path/of/image/file.jpg'
    UpdateUserRequest:
      type: 'object'
      properties:
        name:
          type: 'string'
          description: '表示名'
          example: '田中太郎'
        thumbnail:
          type: 'string'
          description: '検討しろ！！！'
          example: 'TODO: どうやて送るの'
    GetMemberResponse:
      type: 'object'
      properties:
        member:
          $ref: '#/components/schemas/GetUserResponse'
        role:
          type: 'integer'
          description: 'メンバーの権限'
          example: 1
    GetBoardResponse:
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 1
        title:
          type: 'string'
          description: 'ボードのタイトル'
          example: 'ボードのタイトル'
        description:
          type: 'string'
          description: 'ボードの説明'
          example: 'ボードの説明'
        author:
          $ref: '#/components/schemas/GetUserResponse'
        members:
          type: 'array'
          items:
            $ref: '#/components/schemas/GetMemberResponse'
        kanbans:
          type: 'array'
          items:
            $ref: '#/components/schemas/GetKanbanResponse'
        labels:
          type: 'array'
          items:
            $ref: '#/components/schemas/GetLabelResponse'
        is_archive:
          type: 'boolean'
          description: 'アーカイブされているか'
          example: true
        created_at:
          type: 'integer'
          description: '作成時のunixタイム'
          example: 1588299931
        updated_at:
          type: 'integer'
          description: '更新時のunixタイム'
          example: 1588299931
    UpdateBoardRequest:
      type: 'object'
      properties:
        title:
          type: 'string'
          description: 'ボードのタイトル'
          example: 'ボードのタイトル'
        description: 
          type: 'string'
          description: 'ボードの説明'
          example: 'ボードの説明'
    GetKanbanResponse:
      type: 'object'
      properties:
        id:
          type: 'integer'
          description: 'カンバンのID'
          example: 1
        title:
          type: 'string'
          description: 'カンバンのタイトル'
          example: 'カンバンのタイトル'
        author:
          $ref: '#/components/schemas/GetUserResponse'
        cards:
          type: 'array'
          items:
            $ref: '#/components/schemas/GetCardResponse'
        created_at:
          type: 'integer'
          description: 'カンバン作成時のunixタイム'
          example: 1588299931
        updated_at:
          type: 'integer'
          description: 'カンバン更新時のunixタイム'
          example: 1588299931
        is_archive:
          type: 'boolean'
          description: 'アーカイブされているか'
          example: true
    UpdateKanbanRequest:
      type: 'object'
      properties:
        title:
          type: 'string'
          description: 'カンバンのタイトル'
          example: 'カンバンのタイトル'
    GetCardResponse:
      type: 'object'
      properties:
        id:
          type: 'integer'
          description: 'カードのID'
          example: 1
        title:
          type: 'string'
          description: 'カードのタイトル'
          example: 'カードのタイトル'
        content:
          type: 'string'
          description: 'カードの本文'
          example: 'カードの本文'
        deadline:
          type: 'integer'
          description: '期限'
          example: 1588299931
        author:
          $ref: '#/components/schemas/GetUserResponse'
        labels:
          type: 'array'
          items:
            $ref: '#/components/schemas/GetLabelResponse'
        created_at:
          type: 'integer'
          description: 'カード作成時のunixタイム'
          example: 1588299931
        updated_at:
          type: 'integer'
          description: 'カード更新時のunixタイム'
          example: 1588299931
        is_archive:
          type: 'boolean'
          example: true
    UpdateCardRequest:
      type: 'object'
      properties:
        title:
          type: 'string'
          description: 'カードのタイトル'
          example: 'カードのタイトル'
        content:
          type: 'string'
          description: 'カードの本文'
          example: 'カードの本文'
        deadline:
          type: 'integer'
          example: 1588299931
    UpdateCardLabelRequest:
      type: 'object'
      properties:
        label_id:
          type: 'integer'
          description: 'カードに付加するラベルのID'
          example: 1
    GetLabelResponse:
      type: 'object'
      properties:
        id:
          type: 'integer'
          description: 'ラベルのID'
          example: 1
        name:
          type: 'string'
          description: 'ラベルの名前'
          example: 'ラベル名'
        color:
          type: 'integer'
          description: 'ラベルの色'
          example: 1
        created_at:
          type: 'integer'
          description: 'ラベル作成時のunixタイム'
          example: 1588299931
        updated_at:
          type: 'integer'
          description: 'ラベル更新時のunixタイム'
          example: 1588299931
    UpdateLabelRequest:
      type: 'object'
      properties:
        name:
          type: 'string'
          description: 'ラベル名'
          example: 'ラベル名'
        color:
          type: 'integer'
          description: 'ラベルの色'
          example: 1
    ErrorResponse:
      type: 'object'
      properties:
        code:
          type: 'integer'
          description: 'HTTPステータスコード'
          example: 400
        info:
          type: 'object'
          properties:
            message_jp:
              type: 'string'
              description: '日本語のメッセージ'
              example: '入力値が不正です'
            message_en:
              type: 'string'
              description: '英語のメッセージ'
              example: 'The input value is invalid'
  # parameters -----------
  parameters:
    # header ------
    AccessToken:
      name: 'token'
      description: 'Firebaseで発行されるJWT。Authorizationヘッダに Bearea {JWT} の形式で指定してください。'
      in: 'header'
      required: true
      schema:
        type: 'string'
    # path --------
    UserID:
      name: 'user_id'
      description: 'サーバで保持しているユーザのID'
      in: 'path'
      required: true
      schema:
        type: 'integer'
    BoardID:
      name: 'board_id'
      description: 'サーバで保持しているボードのID'
      in: 'path'
      required: true
      schema:
        type: 'integer'
    KanbanID:
      name: 'kanban_id'
      description: 'サーバで保持しているカンバンのID'
      in: 'path'
      required: true
      schema:
        type: 'integer'
    CardID:
      name: 'card_id'
      description: 'サーバで保持しているカードのID'
      in: 'path'
      required: true
      schema:
        type: 'integer'
    LabelID:
      name: 'label_id'
      description: 'サーバで保持しているラベルのID'
      in: 'path'
      required: true
      schema:
        type: 'integer'
  # requestBody ------------
  requestBodies:
    UpdateUser:
      description: 'ユーザを作成/更新するためのリクエスト'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUserRequest'
    UpdateBoard:
      description: 'ボードを作成/更新するためのリクエスト'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateBoardRequest'
    UpdateRole:
      description: 'ボードのロールを変更。mockでは実際の変更は起こりません。'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              role:
                type: 'integer'
    UpdateKanban:
      description: '看板を作成/更新するためのリクエスト'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateKanbanRequest'
    UpdateCard:
      description: 'カードを作成/更新するためのリクエスト'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCardRequest'
    UpdateCardLabel:
      description: 'カードにラベルを付加するためのリクエスト'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCardLabelRequest'
    UpdateLabel:
      description: 'ラベルを作成/更新するためのリクエスト'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateLabelRequest'
  responses:
    NoContent:
      description: '正常終了。statusCode: 204'
    BadRequest:
      description: 'リクエストに何らかの誤りがある場合にこのエラーが返却されます。'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: '認証が失敗した場合にこのエラーが返却されます。'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: 'サーバ内でエラーが起きた場合にこのエラーが返却されます。'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'