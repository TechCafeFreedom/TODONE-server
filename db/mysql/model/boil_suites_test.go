// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Boards", testBoards)
	t.Run("Cards", testCards)
	t.Run("Kanbans", testKanbans)
	t.Run("Labels", testLabels)
	t.Run("Users", testUsers)
	t.Run("UsersBoards", testUsersBoards)
}

func TestDelete(t *testing.T) {
	t.Run("Boards", testBoardsDelete)
	t.Run("Cards", testCardsDelete)
	t.Run("Kanbans", testKanbansDelete)
	t.Run("Labels", testLabelsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UsersBoards", testUsersBoardsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Boards", testBoardsQueryDeleteAll)
	t.Run("Cards", testCardsQueryDeleteAll)
	t.Run("Kanbans", testKanbansQueryDeleteAll)
	t.Run("Labels", testLabelsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UsersBoards", testUsersBoardsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Boards", testBoardsSliceDeleteAll)
	t.Run("Cards", testCardsSliceDeleteAll)
	t.Run("Kanbans", testKanbansSliceDeleteAll)
	t.Run("Labels", testLabelsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UsersBoards", testUsersBoardsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Boards", testBoardsExists)
	t.Run("Cards", testCardsExists)
	t.Run("Kanbans", testKanbansExists)
	t.Run("Labels", testLabelsExists)
	t.Run("Users", testUsersExists)
	t.Run("UsersBoards", testUsersBoardsExists)
}

func TestFind(t *testing.T) {
	t.Run("Boards", testBoardsFind)
	t.Run("Cards", testCardsFind)
	t.Run("Kanbans", testKanbansFind)
	t.Run("Labels", testLabelsFind)
	t.Run("Users", testUsersFind)
	t.Run("UsersBoards", testUsersBoardsFind)
}

func TestBind(t *testing.T) {
	t.Run("Boards", testBoardsBind)
	t.Run("Cards", testCardsBind)
	t.Run("Kanbans", testKanbansBind)
	t.Run("Labels", testLabelsBind)
	t.Run("Users", testUsersBind)
	t.Run("UsersBoards", testUsersBoardsBind)
}

func TestOne(t *testing.T) {
	t.Run("Boards", testBoardsOne)
	t.Run("Cards", testCardsOne)
	t.Run("Kanbans", testKanbansOne)
	t.Run("Labels", testLabelsOne)
	t.Run("Users", testUsersOne)
	t.Run("UsersBoards", testUsersBoardsOne)
}

func TestAll(t *testing.T) {
	t.Run("Boards", testBoardsAll)
	t.Run("Cards", testCardsAll)
	t.Run("Kanbans", testKanbansAll)
	t.Run("Labels", testLabelsAll)
	t.Run("Users", testUsersAll)
	t.Run("UsersBoards", testUsersBoardsAll)
}

func TestCount(t *testing.T) {
	t.Run("Boards", testBoardsCount)
	t.Run("Cards", testCardsCount)
	t.Run("Kanbans", testKanbansCount)
	t.Run("Labels", testLabelsCount)
	t.Run("Users", testUsersCount)
	t.Run("UsersBoards", testUsersBoardsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Boards", testBoardsHooks)
	t.Run("Cards", testCardsHooks)
	t.Run("Kanbans", testKanbansHooks)
	t.Run("Labels", testLabelsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UsersBoards", testUsersBoardsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Boards", testBoardsInsert)
	t.Run("Boards", testBoardsInsertWhitelist)
	t.Run("Cards", testCardsInsert)
	t.Run("Cards", testCardsInsertWhitelist)
	t.Run("Kanbans", testKanbansInsert)
	t.Run("Kanbans", testKanbansInsertWhitelist)
	t.Run("Labels", testLabelsInsert)
	t.Run("Labels", testLabelsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UsersBoards", testUsersBoardsInsert)
	t.Run("UsersBoards", testUsersBoardsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BoardToUserUsingUser", testBoardToOneUserUsingUser)
	t.Run("CardToUserUsingUser", testCardToOneUserUsingUser)
	t.Run("CardToKanbanUsingKanban", testCardToOneKanbanUsingKanban)
	t.Run("KanbanToUserUsingUser", testKanbanToOneUserUsingUser)
	t.Run("KanbanToBoardUsingBoard", testKanbanToOneBoardUsingBoard)
	t.Run("UsersBoardToUserUsingUser", testUsersBoardToOneUserUsingUser)
	t.Run("UsersBoardToBoardUsingBoard", testUsersBoardToOneBoardUsingBoard)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BoardToKanbans", testBoardToManyKanbans)
	t.Run("BoardToUsersBoards", testBoardToManyUsersBoards)
	t.Run("CardToLabels", testCardToManyLabels)
	t.Run("KanbanToCards", testKanbanToManyCards)
	t.Run("LabelToCards", testLabelToManyCards)
	t.Run("UserToBoards", testUserToManyBoards)
	t.Run("UserToCards", testUserToManyCards)
	t.Run("UserToKanbans", testUserToManyKanbans)
	t.Run("UserToUsersBoards", testUserToManyUsersBoards)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BoardToUserUsingBoards", testBoardToOneSetOpUserUsingUser)
	t.Run("CardToUserUsingCards", testCardToOneSetOpUserUsingUser)
	t.Run("CardToKanbanUsingCards", testCardToOneSetOpKanbanUsingKanban)
	t.Run("KanbanToUserUsingKanbans", testKanbanToOneSetOpUserUsingUser)
	t.Run("KanbanToBoardUsingKanbans", testKanbanToOneSetOpBoardUsingBoard)
	t.Run("UsersBoardToUserUsingUsersBoards", testUsersBoardToOneSetOpUserUsingUser)
	t.Run("UsersBoardToBoardUsingUsersBoards", testUsersBoardToOneSetOpBoardUsingBoard)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BoardToKanbans", testBoardToManyAddOpKanbans)
	t.Run("BoardToUsersBoards", testBoardToManyAddOpUsersBoards)
	t.Run("CardToLabels", testCardToManyAddOpLabels)
	t.Run("KanbanToCards", testKanbanToManyAddOpCards)
	t.Run("LabelToCards", testLabelToManyAddOpCards)
	t.Run("UserToBoards", testUserToManyAddOpBoards)
	t.Run("UserToCards", testUserToManyAddOpCards)
	t.Run("UserToKanbans", testUserToManyAddOpKanbans)
	t.Run("UserToUsersBoards", testUserToManyAddOpUsersBoards)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CardToLabels", testCardToManySetOpLabels)
	t.Run("LabelToCards", testLabelToManySetOpCards)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CardToLabels", testCardToManyRemoveOpLabels)
	t.Run("LabelToCards", testLabelToManyRemoveOpCards)
}

func TestReload(t *testing.T) {
	t.Run("Boards", testBoardsReload)
	t.Run("Cards", testCardsReload)
	t.Run("Kanbans", testKanbansReload)
	t.Run("Labels", testLabelsReload)
	t.Run("Users", testUsersReload)
	t.Run("UsersBoards", testUsersBoardsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Boards", testBoardsReloadAll)
	t.Run("Cards", testCardsReloadAll)
	t.Run("Kanbans", testKanbansReloadAll)
	t.Run("Labels", testLabelsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UsersBoards", testUsersBoardsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Boards", testBoardsSelect)
	t.Run("Cards", testCardsSelect)
	t.Run("Kanbans", testKanbansSelect)
	t.Run("Labels", testLabelsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UsersBoards", testUsersBoardsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Boards", testBoardsUpdate)
	t.Run("Cards", testCardsUpdate)
	t.Run("Kanbans", testKanbansUpdate)
	t.Run("Labels", testLabelsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UsersBoards", testUsersBoardsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Boards", testBoardsSliceUpdateAll)
	t.Run("Cards", testCardsSliceUpdateAll)
	t.Run("Kanbans", testKanbansSliceUpdateAll)
	t.Run("Labels", testLabelsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UsersBoards", testUsersBoardsSliceUpdateAll)
}
