// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Labels", testLabels)
	t.Run("Projects", testProjects)
	t.Run("ProjectsLabels", testProjectsLabels)
	t.Run("ProjectsTodos", testProjectsTodos)
	t.Run("Todos", testTodos)
	t.Run("TodosLabels", testTodosLabels)
	t.Run("Users", testUsers)
	t.Run("UsersProjects", testUsersProjects)
}

func TestDelete(t *testing.T) {
	t.Run("Labels", testLabelsDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("ProjectsLabels", testProjectsLabelsDelete)
	t.Run("ProjectsTodos", testProjectsTodosDelete)
	t.Run("Todos", testTodosDelete)
	t.Run("TodosLabels", testTodosLabelsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UsersProjects", testUsersProjectsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Labels", testLabelsQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("ProjectsLabels", testProjectsLabelsQueryDeleteAll)
	t.Run("ProjectsTodos", testProjectsTodosQueryDeleteAll)
	t.Run("Todos", testTodosQueryDeleteAll)
	t.Run("TodosLabels", testTodosLabelsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UsersProjects", testUsersProjectsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Labels", testLabelsSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("ProjectsLabels", testProjectsLabelsSliceDeleteAll)
	t.Run("ProjectsTodos", testProjectsTodosSliceDeleteAll)
	t.Run("Todos", testTodosSliceDeleteAll)
	t.Run("TodosLabels", testTodosLabelsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UsersProjects", testUsersProjectsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Labels", testLabelsExists)
	t.Run("Projects", testProjectsExists)
	t.Run("ProjectsLabels", testProjectsLabelsExists)
	t.Run("ProjectsTodos", testProjectsTodosExists)
	t.Run("Todos", testTodosExists)
	t.Run("TodosLabels", testTodosLabelsExists)
	t.Run("Users", testUsersExists)
	t.Run("UsersProjects", testUsersProjectsExists)
}

func TestFind(t *testing.T) {
	t.Run("Labels", testLabelsFind)
	t.Run("Projects", testProjectsFind)
	t.Run("ProjectsLabels", testProjectsLabelsFind)
	t.Run("ProjectsTodos", testProjectsTodosFind)
	t.Run("Todos", testTodosFind)
	t.Run("TodosLabels", testTodosLabelsFind)
	t.Run("Users", testUsersFind)
	t.Run("UsersProjects", testUsersProjectsFind)
}

func TestBind(t *testing.T) {
	t.Run("Labels", testLabelsBind)
	t.Run("Projects", testProjectsBind)
	t.Run("ProjectsLabels", testProjectsLabelsBind)
	t.Run("ProjectsTodos", testProjectsTodosBind)
	t.Run("Todos", testTodosBind)
	t.Run("TodosLabels", testTodosLabelsBind)
	t.Run("Users", testUsersBind)
	t.Run("UsersProjects", testUsersProjectsBind)
}

func TestOne(t *testing.T) {
	t.Run("Labels", testLabelsOne)
	t.Run("Projects", testProjectsOne)
	t.Run("ProjectsLabels", testProjectsLabelsOne)
	t.Run("ProjectsTodos", testProjectsTodosOne)
	t.Run("Todos", testTodosOne)
	t.Run("TodosLabels", testTodosLabelsOne)
	t.Run("Users", testUsersOne)
	t.Run("UsersProjects", testUsersProjectsOne)
}

func TestAll(t *testing.T) {
	t.Run("Labels", testLabelsAll)
	t.Run("Projects", testProjectsAll)
	t.Run("ProjectsLabels", testProjectsLabelsAll)
	t.Run("ProjectsTodos", testProjectsTodosAll)
	t.Run("Todos", testTodosAll)
	t.Run("TodosLabels", testTodosLabelsAll)
	t.Run("Users", testUsersAll)
	t.Run("UsersProjects", testUsersProjectsAll)
}

func TestCount(t *testing.T) {
	t.Run("Labels", testLabelsCount)
	t.Run("Projects", testProjectsCount)
	t.Run("ProjectsLabels", testProjectsLabelsCount)
	t.Run("ProjectsTodos", testProjectsTodosCount)
	t.Run("Todos", testTodosCount)
	t.Run("TodosLabels", testTodosLabelsCount)
	t.Run("Users", testUsersCount)
	t.Run("UsersProjects", testUsersProjectsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Labels", testLabelsHooks)
	t.Run("Projects", testProjectsHooks)
	t.Run("ProjectsLabels", testProjectsLabelsHooks)
	t.Run("ProjectsTodos", testProjectsTodosHooks)
	t.Run("Todos", testTodosHooks)
	t.Run("TodosLabels", testTodosLabelsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UsersProjects", testUsersProjectsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Labels", testLabelsInsert)
	t.Run("Labels", testLabelsInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("ProjectsLabels", testProjectsLabelsInsert)
	t.Run("ProjectsLabels", testProjectsLabelsInsertWhitelist)
	t.Run("ProjectsTodos", testProjectsTodosInsert)
	t.Run("ProjectsTodos", testProjectsTodosInsertWhitelist)
	t.Run("Todos", testTodosInsert)
	t.Run("Todos", testTodosInsertWhitelist)
	t.Run("TodosLabels", testTodosLabelsInsert)
	t.Run("TodosLabels", testTodosLabelsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UsersProjects", testUsersProjectsInsert)
	t.Run("UsersProjects", testUsersProjectsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ProjectToUserUsingUser", testProjectToOneUserUsingUser)
	t.Run("ProjectsLabelToProjectUsingProject", testProjectsLabelToOneProjectUsingProject)
	t.Run("ProjectsLabelToLabelUsingLabel", testProjectsLabelToOneLabelUsingLabel)
	t.Run("ProjectsTodoToProjectUsingProject", testProjectsTodoToOneProjectUsingProject)
	t.Run("ProjectsTodoToTodoUsingTodo", testProjectsTodoToOneTodoUsingTodo)
	t.Run("TodoToUserUsingUser", testTodoToOneUserUsingUser)
	t.Run("TodosLabelToTodoUsingTodo", testTodosLabelToOneTodoUsingTodo)
	t.Run("TodosLabelToLabelUsingLabel", testTodosLabelToOneLabelUsingLabel)
	t.Run("UsersProjectToUserUsingUser", testUsersProjectToOneUserUsingUser)
	t.Run("UsersProjectToProjectUsingProject", testUsersProjectToOneProjectUsingProject)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("LabelToProjectsLabels", testLabelToManyProjectsLabels)
	t.Run("LabelToTodosLabels", testLabelToManyTodosLabels)
	t.Run("ProjectToProjectsLabels", testProjectToManyProjectsLabels)
	t.Run("ProjectToProjectsTodos", testProjectToManyProjectsTodos)
	t.Run("ProjectToUsersProjects", testProjectToManyUsersProjects)
	t.Run("TodoToProjectsTodos", testTodoToManyProjectsTodos)
	t.Run("TodoToTodosLabels", testTodoToManyTodosLabels)
	t.Run("UserToProjects", testUserToManyProjects)
	t.Run("UserToTodos", testUserToManyTodos)
	t.Run("UserToUsersProjects", testUserToManyUsersProjects)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ProjectToUserUsingProjects", testProjectToOneSetOpUserUsingUser)
	t.Run("ProjectsLabelToProjectUsingProjectsLabels", testProjectsLabelToOneSetOpProjectUsingProject)
	t.Run("ProjectsLabelToLabelUsingProjectsLabels", testProjectsLabelToOneSetOpLabelUsingLabel)
	t.Run("ProjectsTodoToProjectUsingProjectsTodos", testProjectsTodoToOneSetOpProjectUsingProject)
	t.Run("ProjectsTodoToTodoUsingProjectsTodos", testProjectsTodoToOneSetOpTodoUsingTodo)
	t.Run("TodoToUserUsingTodos", testTodoToOneSetOpUserUsingUser)
	t.Run("TodosLabelToTodoUsingTodosLabels", testTodosLabelToOneSetOpTodoUsingTodo)
	t.Run("TodosLabelToLabelUsingTodosLabels", testTodosLabelToOneSetOpLabelUsingLabel)
	t.Run("UsersProjectToUserUsingUsersProjects", testUsersProjectToOneSetOpUserUsingUser)
	t.Run("UsersProjectToProjectUsingUsersProjects", testUsersProjectToOneSetOpProjectUsingProject)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("LabelToProjectsLabels", testLabelToManyAddOpProjectsLabels)
	t.Run("LabelToTodosLabels", testLabelToManyAddOpTodosLabels)
	t.Run("ProjectToProjectsLabels", testProjectToManyAddOpProjectsLabels)
	t.Run("ProjectToProjectsTodos", testProjectToManyAddOpProjectsTodos)
	t.Run("ProjectToUsersProjects", testProjectToManyAddOpUsersProjects)
	t.Run("TodoToProjectsTodos", testTodoToManyAddOpProjectsTodos)
	t.Run("TodoToTodosLabels", testTodoToManyAddOpTodosLabels)
	t.Run("UserToProjects", testUserToManyAddOpProjects)
	t.Run("UserToTodos", testUserToManyAddOpTodos)
	t.Run("UserToUsersProjects", testUserToManyAddOpUsersProjects)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Labels", testLabelsReload)
	t.Run("Projects", testProjectsReload)
	t.Run("ProjectsLabels", testProjectsLabelsReload)
	t.Run("ProjectsTodos", testProjectsTodosReload)
	t.Run("Todos", testTodosReload)
	t.Run("TodosLabels", testTodosLabelsReload)
	t.Run("Users", testUsersReload)
	t.Run("UsersProjects", testUsersProjectsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Labels", testLabelsReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("ProjectsLabels", testProjectsLabelsReloadAll)
	t.Run("ProjectsTodos", testProjectsTodosReloadAll)
	t.Run("Todos", testTodosReloadAll)
	t.Run("TodosLabels", testTodosLabelsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UsersProjects", testUsersProjectsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Labels", testLabelsSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("ProjectsLabels", testProjectsLabelsSelect)
	t.Run("ProjectsTodos", testProjectsTodosSelect)
	t.Run("Todos", testTodosSelect)
	t.Run("TodosLabels", testTodosLabelsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UsersProjects", testUsersProjectsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Labels", testLabelsUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("ProjectsLabels", testProjectsLabelsUpdate)
	t.Run("ProjectsTodos", testProjectsTodosUpdate)
	t.Run("Todos", testTodosUpdate)
	t.Run("TodosLabels", testTodosLabelsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UsersProjects", testUsersProjectsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Labels", testLabelsSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("ProjectsLabels", testProjectsLabelsSliceUpdateAll)
	t.Run("ProjectsTodos", testProjectsTodosSliceUpdateAll)
	t.Run("Todos", testTodosSliceUpdateAll)
	t.Run("TodosLabels", testTodosLabelsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UsersProjects", testUsersProjectsSliceUpdateAll)
}
