// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testKanbans(t *testing.T) {
	t.Parallel()

	query := Kanbans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKanbansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKanbansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Kanbans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKanbansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KanbanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKanbansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := KanbanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Kanban exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KanbanExists to return true, but got false.")
	}
}

func testKanbansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	kanbanFound, err := FindKanban(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if kanbanFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKanbansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Kanbans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testKanbansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Kanbans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKanbansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	kanbanOne := &Kanban{}
	kanbanTwo := &Kanban{}
	if err = randomize.Struct(seed, kanbanOne, kanbanDBTypes, false, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}
	if err = randomize.Struct(seed, kanbanTwo, kanbanDBTypes, false, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = kanbanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = kanbanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Kanbans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKanbansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	kanbanOne := &Kanban{}
	kanbanTwo := &Kanban{}
	if err = randomize.Struct(seed, kanbanOne, kanbanDBTypes, false, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}
	if err = randomize.Struct(seed, kanbanTwo, kanbanDBTypes, false, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = kanbanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = kanbanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func kanbanBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func kanbanAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Kanban) error {
	*o = Kanban{}
	return nil
}

func testKanbansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Kanban{}
	o := &Kanban{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, kanbanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Kanban object: %s", err)
	}

	AddKanbanHook(boil.BeforeInsertHook, kanbanBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	kanbanBeforeInsertHooks = []KanbanHook{}

	AddKanbanHook(boil.AfterInsertHook, kanbanAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	kanbanAfterInsertHooks = []KanbanHook{}

	AddKanbanHook(boil.AfterSelectHook, kanbanAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	kanbanAfterSelectHooks = []KanbanHook{}

	AddKanbanHook(boil.BeforeUpdateHook, kanbanBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	kanbanBeforeUpdateHooks = []KanbanHook{}

	AddKanbanHook(boil.AfterUpdateHook, kanbanAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	kanbanAfterUpdateHooks = []KanbanHook{}

	AddKanbanHook(boil.BeforeDeleteHook, kanbanBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	kanbanBeforeDeleteHooks = []KanbanHook{}

	AddKanbanHook(boil.AfterDeleteHook, kanbanAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	kanbanAfterDeleteHooks = []KanbanHook{}

	AddKanbanHook(boil.BeforeUpsertHook, kanbanBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	kanbanBeforeUpsertHooks = []KanbanHook{}

	AddKanbanHook(boil.AfterUpsertHook, kanbanAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	kanbanAfterUpsertHooks = []KanbanHook{}
}

func testKanbansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKanbansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(kanbanColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKanbanToManyCards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Kanban
	var b, c Card

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cardDBTypes, false, cardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cardDBTypes, false, cardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.KanbanID = a.ID
	c.KanbanID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Cards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.KanbanID == b.KanbanID {
			bFound = true
		}
		if v.KanbanID == c.KanbanID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := KanbanSlice{&a}
	if err = a.L.LoadCards(ctx, tx, false, (*[]*Kanban)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Cards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Cards = nil
	if err = a.L.LoadCards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Cards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testKanbanToManyAddOpCards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Kanban
	var b, c, d, e Card

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, kanbanDBTypes, false, strmangle.SetComplement(kanbanPrimaryKeyColumns, kanbanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Card{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cardDBTypes, false, strmangle.SetComplement(cardPrimaryKeyColumns, cardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Card{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.KanbanID {
			t.Error("foreign key was wrong value", a.ID, first.KanbanID)
		}
		if a.ID != second.KanbanID {
			t.Error("foreign key was wrong value", a.ID, second.KanbanID)
		}

		if first.R.Kanban != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Kanban != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Cards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Cards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Cards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testKanbanToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Kanban
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, kanbanDBTypes, false, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := KanbanSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Kanban)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testKanbanToOneBoardUsingBoard(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Kanban
	var foreign Board

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, kanbanDBTypes, false, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BoardID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Board().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := KanbanSlice{&local}
	if err = local.L.LoadBoard(ctx, tx, false, (*[]*Kanban)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Board = nil
	if err = local.L.LoadBoard(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testKanbanToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Kanban
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, kanbanDBTypes, false, strmangle.SetComplement(kanbanPrimaryKeyColumns, kanbanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Kanbans[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testKanbanToOneSetOpBoardUsingBoard(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Kanban
	var b, c Board

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, kanbanDBTypes, false, strmangle.SetComplement(kanbanPrimaryKeyColumns, kanbanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Board{&b, &c} {
		err = a.SetBoard(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Board != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Kanbans[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BoardID))
		reflect.Indirect(reflect.ValueOf(&a.BoardID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID, x.ID)
		}
	}
}

func testKanbansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKanbansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KanbanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKanbansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Kanbans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	kanbanDBTypes = map[string]string{`ID`: `int`, `UserID`: `int`, `BoardID`: `int`, `Title`: `varchar`, `IsArchive`: `tinyint`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testKanbansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(kanbanPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(kanbanAllColumns) == len(kanbanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testKanbansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(kanbanAllColumns) == len(kanbanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Kanban{}
	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, kanbanDBTypes, true, kanbanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(kanbanAllColumns, kanbanPrimaryKeyColumns) {
		fields = kanbanAllColumns
	} else {
		fields = strmangle.SetComplement(
			kanbanAllColumns,
			kanbanPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := KanbanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testKanbansUpsert(t *testing.T) {
	t.Parallel()

	if len(kanbanAllColumns) == len(kanbanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLKanbanUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Kanban{}
	if err = randomize.Struct(seed, &o, kanbanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Kanban: %s", err)
	}

	count, err := Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, kanbanDBTypes, false, kanbanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Kanban struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Kanban: %s", err)
	}

	count, err = Kanbans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
