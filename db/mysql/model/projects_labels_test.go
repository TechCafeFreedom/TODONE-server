// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectsLabels(t *testing.T) {
	t.Parallel()

	query := ProjectsLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectsLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectsLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectsLabelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProjectsLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectsLabelExists to return true, but got false.")
	}
}

func testProjectsLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectsLabelFound, err := FindProjectsLabel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if projectsLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectsLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectsLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectsLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectsLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectsLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectsLabelOne := &ProjectsLabel{}
	projectsLabelTwo := &ProjectsLabel{}
	if err = randomize.Struct(seed, projectsLabelOne, projectsLabelDBTypes, false, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsLabelTwo, projectsLabelDBTypes, false, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectsLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectsLabelOne := &ProjectsLabel{}
	projectsLabelTwo := &ProjectsLabel{}
	if err = randomize.Struct(seed, projectsLabelOne, projectsLabelDBTypes, false, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsLabelTwo, projectsLabelDBTypes, false, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectsLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func projectsLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsLabel) error {
	*o = ProjectsLabel{}
	return nil
}

func testProjectsLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectsLabel{}
	o := &ProjectsLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel object: %s", err)
	}

	AddProjectsLabelHook(boil.BeforeInsertHook, projectsLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectsLabelBeforeInsertHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.AfterInsertHook, projectsLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectsLabelAfterInsertHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.AfterSelectHook, projectsLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectsLabelAfterSelectHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.BeforeUpdateHook, projectsLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectsLabelBeforeUpdateHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.AfterUpdateHook, projectsLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectsLabelAfterUpdateHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.BeforeDeleteHook, projectsLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectsLabelBeforeDeleteHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.AfterDeleteHook, projectsLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectsLabelAfterDeleteHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.BeforeUpsertHook, projectsLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectsLabelBeforeUpsertHooks = []ProjectsLabelHook{}

	AddProjectsLabelHook(boil.AfterUpsertHook, projectsLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectsLabelAfterUpsertHooks = []ProjectsLabelHook{}
}

func testProjectsLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectsLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsLabelToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsLabel
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsLabelDBTypes, false, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsLabelSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*ProjectsLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsLabelToOneLabelUsingLabel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsLabel
	var foreign Label

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsLabelDBTypes, false, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Label struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LabelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Label().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsLabelSlice{&local}
	if err = local.L.LoadLabel(ctx, tx, false, (*[]*ProjectsLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Label = nil
	if err = local.L.LoadLabel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsLabelToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsLabel
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsLabelDBTypes, false, strmangle.SetComplement(projectsLabelPrimaryKeyColumns, projectsLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}
func testProjectsLabelToOneSetOpLabelUsingLabel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsLabel
	var b, c Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsLabelDBTypes, false, strmangle.SetComplement(projectsLabelPrimaryKeyColumns, projectsLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Label{&b, &c} {
		err = a.SetLabel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Label != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LabelID))
		reflect.Indirect(reflect.ValueOf(&a.LabelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID, x.ID)
		}
	}
}

func testProjectsLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectsLabelDBTypes = map[string]string{`ID`: `int`, `ProjectID`: `int`, `LabelID`: `int`}
	_                    = bytes.MinRead
)

func testProjectsLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectsLabelAllColumns) == len(projectsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectsLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectsLabelAllColumns) == len(projectsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsLabel{}
	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsLabelDBTypes, true, projectsLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectsLabelAllColumns, projectsLabelPrimaryKeyColumns) {
		fields = projectsLabelAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectsLabelAllColumns,
			projectsLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectsLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectsLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(projectsLabelAllColumns) == len(projectsLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProjectsLabelUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectsLabel{}
	if err = randomize.Struct(seed, &o, projectsLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsLabel: %s", err)
	}

	count, err := ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectsLabelDBTypes, false, projectsLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsLabel: %s", err)
	}

	count, err = ProjectsLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
