// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectsTodos(t *testing.T) {
	t.Parallel()

	query := ProjectsTodos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectsTodosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsTodosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectsTodos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsTodosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsTodoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectsTodosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectsTodoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProjectsTodo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectsTodoExists to return true, but got false.")
	}
}

func testProjectsTodosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectsTodoFound, err := FindProjectsTodo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if projectsTodoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectsTodosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectsTodos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectsTodosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectsTodos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectsTodosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectsTodoOne := &ProjectsTodo{}
	projectsTodoTwo := &ProjectsTodo{}
	if err = randomize.Struct(seed, projectsTodoOne, projectsTodoDBTypes, false, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsTodoTwo, projectsTodoDBTypes, false, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsTodoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsTodoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsTodos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectsTodosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectsTodoOne := &ProjectsTodo{}
	projectsTodoTwo := &ProjectsTodo{}
	if err = randomize.Struct(seed, projectsTodoOne, projectsTodoDBTypes, false, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}
	if err = randomize.Struct(seed, projectsTodoTwo, projectsTodoDBTypes, false, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectsTodoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectsTodoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectsTodoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func projectsTodoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectsTodo) error {
	*o = ProjectsTodo{}
	return nil
}

func testProjectsTodosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectsTodo{}
	o := &ProjectsTodo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo object: %s", err)
	}

	AddProjectsTodoHook(boil.BeforeInsertHook, projectsTodoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectsTodoBeforeInsertHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.AfterInsertHook, projectsTodoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectsTodoAfterInsertHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.AfterSelectHook, projectsTodoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectsTodoAfterSelectHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.BeforeUpdateHook, projectsTodoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectsTodoBeforeUpdateHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.AfterUpdateHook, projectsTodoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectsTodoAfterUpdateHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.BeforeDeleteHook, projectsTodoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectsTodoBeforeDeleteHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.AfterDeleteHook, projectsTodoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectsTodoAfterDeleteHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.BeforeUpsertHook, projectsTodoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectsTodoBeforeUpsertHooks = []ProjectsTodoHook{}

	AddProjectsTodoHook(boil.AfterUpsertHook, projectsTodoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectsTodoAfterUpsertHooks = []ProjectsTodoHook{}
}

func testProjectsTodosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsTodosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectsTodoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectsTodoToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsTodo
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsTodoDBTypes, false, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsTodoSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*ProjectsTodo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsTodoToOneTodoUsingTodo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectsTodo
	var foreign Todo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectsTodoDBTypes, false, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, todoDBTypes, false, todoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Todo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TodoID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Todo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectsTodoSlice{&local}
	if err = local.L.LoadTodo(ctx, tx, false, (*[]*ProjectsTodo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Todo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Todo = nil
	if err = local.L.LoadTodo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Todo == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectsTodoToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsTodo
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsTodoDBTypes, false, strmangle.SetComplement(projectsTodoPrimaryKeyColumns, projectsTodoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsTodos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}
func testProjectsTodoToOneSetOpTodoUsingTodo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectsTodo
	var b, c Todo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectsTodoDBTypes, false, strmangle.SetComplement(projectsTodoPrimaryKeyColumns, projectsTodoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Todo{&b, &c} {
		err = a.SetTodo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Todo != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectsTodos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TodoID != x.ID {
			t.Error("foreign key was wrong value", a.TodoID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TodoID))
		reflect.Indirect(reflect.ValueOf(&a.TodoID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TodoID != x.ID {
			t.Error("foreign key was wrong value", a.TodoID, x.ID)
		}
	}
}

func testProjectsTodosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsTodosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectsTodoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectsTodosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectsTodos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectsTodoDBTypes = map[string]string{`ID`: `int`, `ProjectID`: `int`, `TodoID`: `int`}
	_                   = bytes.MinRead
)

func testProjectsTodosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectsTodoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectsTodoAllColumns) == len(projectsTodoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectsTodosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectsTodoAllColumns) == len(projectsTodoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectsTodo{}
	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectsTodoDBTypes, true, projectsTodoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectsTodoAllColumns, projectsTodoPrimaryKeyColumns) {
		fields = projectsTodoAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectsTodoAllColumns,
			projectsTodoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectsTodoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectsTodosUpsert(t *testing.T) {
	t.Parallel()

	if len(projectsTodoAllColumns) == len(projectsTodoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLProjectsTodoUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectsTodo{}
	if err = randomize.Struct(seed, &o, projectsTodoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsTodo: %s", err)
	}

	count, err := ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectsTodoDBTypes, false, projectsTodoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectsTodo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectsTodo: %s", err)
	}

	count, err = ProjectsTodos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
