// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ProjectsTodo is an object representing the database table.
type ProjectsTodo struct {
	ID        int `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID int `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	TodoID    int `boil:"todo_id" json:"todo_id" toml:"todo_id" yaml:"todo_id"`

	R *projectsTodoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectsTodoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectsTodoColumns = struct {
	ID        string
	ProjectID string
	TodoID    string
}{
	ID:        "id",
	ProjectID: "project_id",
	TodoID:    "todo_id",
}

// Generated where

var ProjectsTodoWhere = struct {
	ID        whereHelperint
	ProjectID whereHelperint
	TodoID    whereHelperint
}{
	ID:        whereHelperint{field: "`projects_todos`.`id`"},
	ProjectID: whereHelperint{field: "`projects_todos`.`project_id`"},
	TodoID:    whereHelperint{field: "`projects_todos`.`todo_id`"},
}

// ProjectsTodoRels is where relationship names are stored.
var ProjectsTodoRels = struct {
	Project string
	Todo    string
}{
	Project: "Project",
	Todo:    "Todo",
}

// projectsTodoR is where relationships are stored.
type projectsTodoR struct {
	Project *Project
	Todo    *Todo
}

// NewStruct creates a new relationship struct
func (*projectsTodoR) NewStruct() *projectsTodoR {
	return &projectsTodoR{}
}

// projectsTodoL is where Load methods for each relationship are stored.
type projectsTodoL struct{}

var (
	projectsTodoAllColumns            = []string{"id", "project_id", "todo_id"}
	projectsTodoColumnsWithoutDefault = []string{"project_id", "todo_id"}
	projectsTodoColumnsWithDefault    = []string{"id"}
	projectsTodoPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProjectsTodoSlice is an alias for a slice of pointers to ProjectsTodo.
	// This should generally be used opposed to []ProjectsTodo.
	ProjectsTodoSlice []*ProjectsTodo
	// ProjectsTodoHook is the signature for custom ProjectsTodo hook methods
	ProjectsTodoHook func(context.Context, boil.ContextExecutor, *ProjectsTodo) error

	projectsTodoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectsTodoType                 = reflect.TypeOf(&ProjectsTodo{})
	projectsTodoMapping              = queries.MakeStructMapping(projectsTodoType)
	projectsTodoPrimaryKeyMapping, _ = queries.BindMapping(projectsTodoType, projectsTodoMapping, projectsTodoPrimaryKeyColumns)
	projectsTodoInsertCacheMut       sync.RWMutex
	projectsTodoInsertCache          = make(map[string]insertCache)
	projectsTodoUpdateCacheMut       sync.RWMutex
	projectsTodoUpdateCache          = make(map[string]updateCache)
	projectsTodoUpsertCacheMut       sync.RWMutex
	projectsTodoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectsTodoBeforeInsertHooks []ProjectsTodoHook
var projectsTodoBeforeUpdateHooks []ProjectsTodoHook
var projectsTodoBeforeDeleteHooks []ProjectsTodoHook
var projectsTodoBeforeUpsertHooks []ProjectsTodoHook

var projectsTodoAfterInsertHooks []ProjectsTodoHook
var projectsTodoAfterSelectHooks []ProjectsTodoHook
var projectsTodoAfterUpdateHooks []ProjectsTodoHook
var projectsTodoAfterDeleteHooks []ProjectsTodoHook
var projectsTodoAfterUpsertHooks []ProjectsTodoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProjectsTodo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProjectsTodo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProjectsTodo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProjectsTodo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProjectsTodo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProjectsTodo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProjectsTodo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProjectsTodo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProjectsTodo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectsTodoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectsTodoHook registers your hook function for all future operations.
func AddProjectsTodoHook(hookPoint boil.HookPoint, projectsTodoHook ProjectsTodoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		projectsTodoBeforeInsertHooks = append(projectsTodoBeforeInsertHooks, projectsTodoHook)
	case boil.BeforeUpdateHook:
		projectsTodoBeforeUpdateHooks = append(projectsTodoBeforeUpdateHooks, projectsTodoHook)
	case boil.BeforeDeleteHook:
		projectsTodoBeforeDeleteHooks = append(projectsTodoBeforeDeleteHooks, projectsTodoHook)
	case boil.BeforeUpsertHook:
		projectsTodoBeforeUpsertHooks = append(projectsTodoBeforeUpsertHooks, projectsTodoHook)
	case boil.AfterInsertHook:
		projectsTodoAfterInsertHooks = append(projectsTodoAfterInsertHooks, projectsTodoHook)
	case boil.AfterSelectHook:
		projectsTodoAfterSelectHooks = append(projectsTodoAfterSelectHooks, projectsTodoHook)
	case boil.AfterUpdateHook:
		projectsTodoAfterUpdateHooks = append(projectsTodoAfterUpdateHooks, projectsTodoHook)
	case boil.AfterDeleteHook:
		projectsTodoAfterDeleteHooks = append(projectsTodoAfterDeleteHooks, projectsTodoHook)
	case boil.AfterUpsertHook:
		projectsTodoAfterUpsertHooks = append(projectsTodoAfterUpsertHooks, projectsTodoHook)
	}
}

// One returns a single projectsTodo record from the query.
func (q projectsTodoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProjectsTodo, error) {
	o := &ProjectsTodo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for projects_todos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProjectsTodo records from the query.
func (q projectsTodoQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProjectsTodoSlice, error) {
	var o []*ProjectsTodo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProjectsTodo slice")
	}

	if len(projectsTodoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProjectsTodo records in the query.
func (q projectsTodoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count projects_todos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectsTodoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if projects_todos exists")
	}

	return count > 0, nil
}

// Project pointed to by the foreign key.
func (o *ProjectsTodo) Project(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ProjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "`projects`")

	return query
}

// Todo pointed to by the foreign key.
func (o *ProjectsTodo) Todo(mods ...qm.QueryMod) todoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TodoID),
	}

	queryMods = append(queryMods, mods...)

	query := Todos(queryMods...)
	queries.SetFrom(query.Query, "`todos`")

	return query
}

// LoadProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectsTodoL) LoadProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectsTodo interface{}, mods queries.Applicator) error {
	var slice []*ProjectsTodo
	var object *ProjectsTodo

	if singular {
		object = maybeProjectsTodo.(*ProjectsTodo)
	} else {
		slice = *maybeProjectsTodo.(*[]*ProjectsTodo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectsTodoR{}
		}
		args = append(args, object.ProjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectsTodoR{}
			}

			for _, a := range args {
				if a == obj.ProjectID {
					continue Outer
				}
			}

			args = append(args, obj.ProjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`projects`), qm.WhereIn(`projects.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(projectsTodoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Project = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.ProjectsTodos = append(foreign.R.ProjectsTodos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProjectID == foreign.ID {
				local.R.Project = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.ProjectsTodos = append(foreign.R.ProjectsTodos, local)
				break
			}
		}
	}

	return nil
}

// LoadTodo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectsTodoL) LoadTodo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectsTodo interface{}, mods queries.Applicator) error {
	var slice []*ProjectsTodo
	var object *ProjectsTodo

	if singular {
		object = maybeProjectsTodo.(*ProjectsTodo)
	} else {
		slice = *maybeProjectsTodo.(*[]*ProjectsTodo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectsTodoR{}
		}
		args = append(args, object.TodoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectsTodoR{}
			}

			for _, a := range args {
				if a == obj.TodoID {
					continue Outer
				}
			}

			args = append(args, obj.TodoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`todos`), qm.WhereIn(`todos.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Todo")
	}

	var resultSlice []*Todo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Todo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for todos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for todos")
	}

	if len(projectsTodoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Todo = foreign
		if foreign.R == nil {
			foreign.R = &todoR{}
		}
		foreign.R.ProjectsTodos = append(foreign.R.ProjectsTodos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TodoID == foreign.ID {
				local.R.Todo = foreign
				if foreign.R == nil {
					foreign.R = &todoR{}
				}
				foreign.R.ProjectsTodos = append(foreign.R.ProjectsTodos, local)
				break
			}
		}
	}

	return nil
}

// SetProject of the projectsTodo to the related item.
// Sets o.R.Project to related.
// Adds o to related.R.ProjectsTodos.
func (o *ProjectsTodo) SetProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `projects_todos` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"project_id"}),
		strmangle.WhereClause("`", "`", 0, projectsTodoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProjectID = related.ID
	if o.R == nil {
		o.R = &projectsTodoR{
			Project: related,
		}
	} else {
		o.R.Project = related
	}

	if related.R == nil {
		related.R = &projectR{
			ProjectsTodos: ProjectsTodoSlice{o},
		}
	} else {
		related.R.ProjectsTodos = append(related.R.ProjectsTodos, o)
	}

	return nil
}

// SetTodo of the projectsTodo to the related item.
// Sets o.R.Todo to related.
// Adds o to related.R.ProjectsTodos.
func (o *ProjectsTodo) SetTodo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Todo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `projects_todos` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"todo_id"}),
		strmangle.WhereClause("`", "`", 0, projectsTodoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TodoID = related.ID
	if o.R == nil {
		o.R = &projectsTodoR{
			Todo: related,
		}
	} else {
		o.R.Todo = related
	}

	if related.R == nil {
		related.R = &todoR{
			ProjectsTodos: ProjectsTodoSlice{o},
		}
	} else {
		related.R.ProjectsTodos = append(related.R.ProjectsTodos, o)
	}

	return nil
}

// ProjectsTodos retrieves all the records using an executor.
func ProjectsTodos(mods ...qm.QueryMod) projectsTodoQuery {
	mods = append(mods, qm.From("`projects_todos`"))
	return projectsTodoQuery{NewQuery(mods...)}
}

// FindProjectsTodo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProjectsTodo(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ProjectsTodo, error) {
	projectsTodoObj := &ProjectsTodo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `projects_todos` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, projectsTodoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from projects_todos")
	}

	return projectsTodoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProjectsTodo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no projects_todos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectsTodoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectsTodoInsertCacheMut.RLock()
	cache, cached := projectsTodoInsertCache[key]
	projectsTodoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectsTodoAllColumns,
			projectsTodoColumnsWithDefault,
			projectsTodoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectsTodoType, projectsTodoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectsTodoType, projectsTodoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `projects_todos` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `projects_todos` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `projects_todos` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, projectsTodoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into projects_todos")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == projectsTodoMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for projects_todos")
	}

CacheNoHooks:
	if !cached {
		projectsTodoInsertCacheMut.Lock()
		projectsTodoInsertCache[key] = cache
		projectsTodoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProjectsTodo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProjectsTodo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	projectsTodoUpdateCacheMut.RLock()
	cache, cached := projectsTodoUpdateCache[key]
	projectsTodoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectsTodoAllColumns,
			projectsTodoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update projects_todos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `projects_todos` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, projectsTodoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectsTodoType, projectsTodoMapping, append(wl, projectsTodoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update projects_todos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for projects_todos")
	}

	if !cached {
		projectsTodoUpdateCacheMut.Lock()
		projectsTodoUpdateCache[key] = cache
		projectsTodoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectsTodoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for projects_todos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for projects_todos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectsTodoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsTodoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `projects_todos` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectsTodoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in projectsTodo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all projectsTodo")
	}
	return rowsAff, nil
}

var mySQLProjectsTodoUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProjectsTodo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no projects_todos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectsTodoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProjectsTodoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectsTodoUpsertCacheMut.RLock()
	cache, cached := projectsTodoUpsertCache[key]
	projectsTodoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			projectsTodoAllColumns,
			projectsTodoColumnsWithDefault,
			projectsTodoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			projectsTodoAllColumns,
			projectsTodoPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert projects_todos, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "projects_todos", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `projects_todos` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(projectsTodoType, projectsTodoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectsTodoType, projectsTodoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for projects_todos")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == projectsTodoMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(projectsTodoType, projectsTodoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for projects_todos")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for projects_todos")
	}

CacheNoHooks:
	if !cached {
		projectsTodoUpsertCacheMut.Lock()
		projectsTodoUpsertCache[key] = cache
		projectsTodoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProjectsTodo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProjectsTodo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProjectsTodo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectsTodoPrimaryKeyMapping)
	sql := "DELETE FROM `projects_todos` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from projects_todos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for projects_todos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q projectsTodoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no projectsTodoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from projects_todos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for projects_todos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectsTodoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(projectsTodoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsTodoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `projects_todos` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectsTodoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from projectsTodo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for projects_todos")
	}

	if len(projectsTodoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProjectsTodo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProjectsTodo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectsTodoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectsTodoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectsTodoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `projects_todos`.* FROM `projects_todos` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectsTodoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProjectsTodoSlice")
	}

	*o = slice

	return nil
}

// ProjectsTodoExists checks if the ProjectsTodo row exists.
func ProjectsTodoExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `projects_todos` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if projects_todos exists")
	}

	return exists, nil
}
