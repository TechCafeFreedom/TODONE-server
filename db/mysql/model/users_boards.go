// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UsersBoard is an object representing the database table.
type UsersBoard struct {
	UserID  int  `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	BoardID int  `boil:"board_id" json:"board_id" toml:"board_id" yaml:"board_id"`
	Role    int8 `boil:"role" json:"role" toml:"role" yaml:"role"`

	R *usersBoardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersBoardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersBoardColumns = struct {
	UserID  string
	BoardID string
	Role    string
}{
	UserID:  "user_id",
	BoardID: "board_id",
	Role:    "role",
}

// Generated where

type whereHelperint8 struct{ field string }

func (w whereHelperint8) EQ(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint8) NEQ(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint8) LT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint8) LTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint8) GT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint8) GTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var UsersBoardWhere = struct {
	UserID  whereHelperint
	BoardID whereHelperint
	Role    whereHelperint8
}{
	UserID:  whereHelperint{field: "`users_boards`.`user_id`"},
	BoardID: whereHelperint{field: "`users_boards`.`board_id`"},
	Role:    whereHelperint8{field: "`users_boards`.`role`"},
}

// UsersBoardRels is where relationship names are stored.
var UsersBoardRels = struct {
	User  string
	Board string
}{
	User:  "User",
	Board: "Board",
}

// usersBoardR is where relationships are stored.
type usersBoardR struct {
	User  *User
	Board *Board
}

// NewStruct creates a new relationship struct
func (*usersBoardR) NewStruct() *usersBoardR {
	return &usersBoardR{}
}

// usersBoardL is where Load methods for each relationship are stored.
type usersBoardL struct{}

var (
	usersBoardAllColumns            = []string{"user_id", "board_id", "role"}
	usersBoardColumnsWithoutDefault = []string{"user_id", "board_id", "role"}
	usersBoardColumnsWithDefault    = []string{}
	usersBoardPrimaryKeyColumns     = []string{"user_id", "board_id"}
)

type (
	// UsersBoardSlice is an alias for a slice of pointers to UsersBoard.
	// This should generally be used opposed to []UsersBoard.
	UsersBoardSlice []*UsersBoard
	// UsersBoardHook is the signature for custom UsersBoard hook methods
	UsersBoardHook func(context.Context, boil.ContextExecutor, *UsersBoard) error

	usersBoardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersBoardType                 = reflect.TypeOf(&UsersBoard{})
	usersBoardMapping              = queries.MakeStructMapping(usersBoardType)
	usersBoardPrimaryKeyMapping, _ = queries.BindMapping(usersBoardType, usersBoardMapping, usersBoardPrimaryKeyColumns)
	usersBoardInsertCacheMut       sync.RWMutex
	usersBoardInsertCache          = make(map[string]insertCache)
	usersBoardUpdateCacheMut       sync.RWMutex
	usersBoardUpdateCache          = make(map[string]updateCache)
	usersBoardUpsertCacheMut       sync.RWMutex
	usersBoardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersBoardBeforeInsertHooks []UsersBoardHook
var usersBoardBeforeUpdateHooks []UsersBoardHook
var usersBoardBeforeDeleteHooks []UsersBoardHook
var usersBoardBeforeUpsertHooks []UsersBoardHook

var usersBoardAfterInsertHooks []UsersBoardHook
var usersBoardAfterSelectHooks []UsersBoardHook
var usersBoardAfterUpdateHooks []UsersBoardHook
var usersBoardAfterDeleteHooks []UsersBoardHook
var usersBoardAfterUpsertHooks []UsersBoardHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersBoard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersBoard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersBoard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersBoard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersBoard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersBoard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersBoard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersBoard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersBoard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersBoardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersBoardHook registers your hook function for all future operations.
func AddUsersBoardHook(hookPoint boil.HookPoint, usersBoardHook UsersBoardHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		usersBoardBeforeInsertHooks = append(usersBoardBeforeInsertHooks, usersBoardHook)
	case boil.BeforeUpdateHook:
		usersBoardBeforeUpdateHooks = append(usersBoardBeforeUpdateHooks, usersBoardHook)
	case boil.BeforeDeleteHook:
		usersBoardBeforeDeleteHooks = append(usersBoardBeforeDeleteHooks, usersBoardHook)
	case boil.BeforeUpsertHook:
		usersBoardBeforeUpsertHooks = append(usersBoardBeforeUpsertHooks, usersBoardHook)
	case boil.AfterInsertHook:
		usersBoardAfterInsertHooks = append(usersBoardAfterInsertHooks, usersBoardHook)
	case boil.AfterSelectHook:
		usersBoardAfterSelectHooks = append(usersBoardAfterSelectHooks, usersBoardHook)
	case boil.AfterUpdateHook:
		usersBoardAfterUpdateHooks = append(usersBoardAfterUpdateHooks, usersBoardHook)
	case boil.AfterDeleteHook:
		usersBoardAfterDeleteHooks = append(usersBoardAfterDeleteHooks, usersBoardHook)
	case boil.AfterUpsertHook:
		usersBoardAfterUpsertHooks = append(usersBoardAfterUpsertHooks, usersBoardHook)
	}
}

// One returns a single usersBoard record from the query.
func (q usersBoardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersBoard, error) {
	o := &UsersBoard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for users_boards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersBoard records from the query.
func (q usersBoardQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersBoardSlice, error) {
	var o []*UsersBoard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UsersBoard slice")
	}

	if len(usersBoardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersBoard records in the query.
func (q usersBoardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count users_boards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersBoardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if users_boards exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UsersBoard) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// Board pointed to by the foreign key.
func (o *UsersBoard) Board(mods ...qm.QueryMod) boardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BoardID),
	}

	queryMods = append(queryMods, mods...)

	query := Boards(queryMods...)
	queries.SetFrom(query.Query, "`boards`")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersBoardL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersBoard interface{}, mods queries.Applicator) error {
	var slice []*UsersBoard
	var object *UsersBoard

	if singular {
		object = maybeUsersBoard.(*UsersBoard)
	} else {
		slice = *maybeUsersBoard.(*[]*UsersBoard)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usersBoardR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersBoardR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(usersBoardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsersBoards = append(foreign.R.UsersBoards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsersBoards = append(foreign.R.UsersBoards, local)
				break
			}
		}
	}

	return nil
}

// LoadBoard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersBoardL) LoadBoard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersBoard interface{}, mods queries.Applicator) error {
	var slice []*UsersBoard
	var object *UsersBoard

	if singular {
		object = maybeUsersBoard.(*UsersBoard)
	} else {
		slice = *maybeUsersBoard.(*[]*UsersBoard)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usersBoardR{}
		}
		args = append(args, object.BoardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersBoardR{}
			}

			for _, a := range args {
				if a == obj.BoardID {
					continue Outer
				}
			}

			args = append(args, obj.BoardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`boards`), qm.WhereIn(`boards.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Board")
	}

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Board")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for boards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boards")
	}

	if len(usersBoardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Board = foreign
		if foreign.R == nil {
			foreign.R = &boardR{}
		}
		foreign.R.UsersBoards = append(foreign.R.UsersBoards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BoardID == foreign.ID {
				local.R.Board = foreign
				if foreign.R == nil {
					foreign.R = &boardR{}
				}
				foreign.R.UsersBoards = append(foreign.R.UsersBoards, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the usersBoard to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsersBoards.
func (o *UsersBoard) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `users_boards` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, usersBoardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.BoardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &usersBoardR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsersBoards: UsersBoardSlice{o},
		}
	} else {
		related.R.UsersBoards = append(related.R.UsersBoards, o)
	}

	return nil
}

// SetBoard of the usersBoard to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.UsersBoards.
func (o *UsersBoard) SetBoard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Board) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `users_boards` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"board_id"}),
		strmangle.WhereClause("`", "`", 0, usersBoardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.BoardID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BoardID = related.ID
	if o.R == nil {
		o.R = &usersBoardR{
			Board: related,
		}
	} else {
		o.R.Board = related
	}

	if related.R == nil {
		related.R = &boardR{
			UsersBoards: UsersBoardSlice{o},
		}
	} else {
		related.R.UsersBoards = append(related.R.UsersBoards, o)
	}

	return nil
}

// UsersBoards retrieves all the records using an executor.
func UsersBoards(mods ...qm.QueryMod) usersBoardQuery {
	mods = append(mods, qm.From("`users_boards`"))
	return usersBoardQuery{NewQuery(mods...)}
}

// FindUsersBoard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersBoard(ctx context.Context, exec boil.ContextExecutor, userID int, boardID int, selectCols ...string) (*UsersBoard, error) {
	usersBoardObj := &UsersBoard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `users_boards` where `user_id`=? AND `board_id`=?", sel,
	)

	q := queries.Raw(query, userID, boardID)

	err := q.Bind(ctx, exec, usersBoardObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from users_boards")
	}

	return usersBoardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersBoard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no users_boards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersBoardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersBoardInsertCacheMut.RLock()
	cache, cached := usersBoardInsertCache[key]
	usersBoardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersBoardAllColumns,
			usersBoardColumnsWithDefault,
			usersBoardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersBoardType, usersBoardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersBoardType, usersBoardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `users_boards` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `users_boards` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `users_boards` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, usersBoardPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into users_boards")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.BoardID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for users_boards")
	}

CacheNoHooks:
	if !cached {
		usersBoardInsertCacheMut.Lock()
		usersBoardInsertCache[key] = cache
		usersBoardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersBoard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersBoard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersBoardUpdateCacheMut.RLock()
	cache, cached := usersBoardUpdateCache[key]
	usersBoardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersBoardAllColumns,
			usersBoardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update users_boards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `users_boards` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, usersBoardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersBoardType, usersBoardMapping, append(wl, usersBoardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update users_boards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for users_boards")
	}

	if !cached {
		usersBoardUpdateCacheMut.Lock()
		usersBoardUpdateCache[key] = cache
		usersBoardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersBoardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for users_boards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for users_boards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersBoardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `users_boards` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, usersBoardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in usersBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all usersBoard")
	}
	return rowsAff, nil
}

var mySQLUsersBoardUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersBoard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no users_boards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersBoardColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUsersBoardUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersBoardUpsertCacheMut.RLock()
	cache, cached := usersBoardUpsertCache[key]
	usersBoardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usersBoardAllColumns,
			usersBoardColumnsWithDefault,
			usersBoardColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usersBoardAllColumns,
			usersBoardPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert users_boards, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "users_boards", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `users_boards` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(usersBoardType, usersBoardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersBoardType, usersBoardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for users_boards")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(usersBoardType, usersBoardMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for users_boards")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for users_boards")
	}

CacheNoHooks:
	if !cached {
		usersBoardUpsertCacheMut.Lock()
		usersBoardUpsertCache[key] = cache
		usersBoardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersBoard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersBoard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UsersBoard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersBoardPrimaryKeyMapping)
	sql := "DELETE FROM `users_boards` WHERE `user_id`=? AND `board_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from users_boards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for users_boards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersBoardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no usersBoardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from users_boards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for users_boards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersBoardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersBoardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `users_boards` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, usersBoardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from usersBoard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for users_boards")
	}

	if len(usersBoardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersBoard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersBoard(ctx, exec, o.UserID, o.BoardID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersBoardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersBoardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersBoardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `users_boards`.* FROM `users_boards` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, usersBoardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UsersBoardSlice")
	}

	*o = slice

	return nil
}

// UsersBoardExists checks if the UsersBoard row exists.
func UsersBoardExists(ctx context.Context, exec boil.ContextExecutor, userID int, boardID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `users_boards` where `user_id`=? AND `board_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, boardID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, boardID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if users_boards exists")
	}

	return exists, nil
}
