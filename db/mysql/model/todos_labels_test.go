// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTodosLabels(t *testing.T) {
	t.Parallel()

	query := TodosLabels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTodosLabelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodosLabelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TodosLabels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodosLabelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodosLabelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodosLabelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TodosLabelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TodosLabel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TodosLabelExists to return true, but got false.")
	}
}

func testTodosLabelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	todosLabelFound, err := FindTodosLabel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if todosLabelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTodosLabelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TodosLabels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTodosLabelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TodosLabels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTodosLabelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	todosLabelOne := &TodosLabel{}
	todosLabelTwo := &TodosLabel{}
	if err = randomize.Struct(seed, todosLabelOne, todosLabelDBTypes, false, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, todosLabelTwo, todosLabelDBTypes, false, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todosLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todosLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodosLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTodosLabelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	todosLabelOne := &TodosLabel{}
	todosLabelTwo := &TodosLabel{}
	if err = randomize.Struct(seed, todosLabelOne, todosLabelDBTypes, false, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}
	if err = randomize.Struct(seed, todosLabelTwo, todosLabelDBTypes, false, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todosLabelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todosLabelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func todosLabelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func todosLabelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodosLabel) error {
	*o = TodosLabel{}
	return nil
}

func testTodosLabelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TodosLabel{}
	o := &TodosLabel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, todosLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TodosLabel object: %s", err)
	}

	AddTodosLabelHook(boil.BeforeInsertHook, todosLabelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	todosLabelBeforeInsertHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.AfterInsertHook, todosLabelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	todosLabelAfterInsertHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.AfterSelectHook, todosLabelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	todosLabelAfterSelectHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.BeforeUpdateHook, todosLabelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	todosLabelBeforeUpdateHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.AfterUpdateHook, todosLabelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	todosLabelAfterUpdateHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.BeforeDeleteHook, todosLabelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	todosLabelBeforeDeleteHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.AfterDeleteHook, todosLabelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	todosLabelAfterDeleteHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.BeforeUpsertHook, todosLabelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	todosLabelBeforeUpsertHooks = []TodosLabelHook{}

	AddTodosLabelHook(boil.AfterUpsertHook, todosLabelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	todosLabelAfterUpsertHooks = []TodosLabelHook{}
}

func testTodosLabelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodosLabelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(todosLabelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodosLabelToOneTodoUsingTodo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TodosLabel
	var foreign Todo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, todosLabelDBTypes, false, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, todoDBTypes, false, todoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Todo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TodoID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Todo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TodosLabelSlice{&local}
	if err = local.L.LoadTodo(ctx, tx, false, (*[]*TodosLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Todo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Todo = nil
	if err = local.L.LoadTodo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Todo == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTodosLabelToOneLabelUsingLabel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TodosLabel
	var foreign Label

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, todosLabelDBTypes, false, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, labelDBTypes, false, labelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Label struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LabelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Label().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TodosLabelSlice{&local}
	if err = local.L.LoadLabel(ctx, tx, false, (*[]*TodosLabel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Label = nil
	if err = local.L.LoadLabel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Label == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTodosLabelToOneSetOpTodoUsingTodo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodosLabel
	var b, c Todo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todosLabelDBTypes, false, strmangle.SetComplement(todosLabelPrimaryKeyColumns, todosLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, todoDBTypes, false, strmangle.SetComplement(todoPrimaryKeyColumns, todoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Todo{&b, &c} {
		err = a.SetTodo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Todo != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TodosLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TodoID != x.ID {
			t.Error("foreign key was wrong value", a.TodoID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TodoID))
		reflect.Indirect(reflect.ValueOf(&a.TodoID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TodoID != x.ID {
			t.Error("foreign key was wrong value", a.TodoID, x.ID)
		}
	}
}
func testTodosLabelToOneSetOpLabelUsingLabel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TodosLabel
	var b, c Label

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, todosLabelDBTypes, false, strmangle.SetComplement(todosLabelPrimaryKeyColumns, todosLabelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, labelDBTypes, false, strmangle.SetComplement(labelPrimaryKeyColumns, labelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Label{&b, &c} {
		err = a.SetLabel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Label != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TodosLabels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LabelID))
		reflect.Indirect(reflect.ValueOf(&a.LabelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LabelID != x.ID {
			t.Error("foreign key was wrong value", a.LabelID, x.ID)
		}
	}
}

func testTodosLabelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodosLabelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodosLabelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodosLabelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodosLabels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	todosLabelDBTypes = map[string]string{`ID`: `int`, `TodoID`: `int`, `LabelID`: `int`}
	_                 = bytes.MinRead
)

func testTodosLabelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(todosLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(todosLabelAllColumns) == len(todosLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTodosLabelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(todosLabelAllColumns) == len(todosLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodosLabel{}
	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todosLabelDBTypes, true, todosLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(todosLabelAllColumns, todosLabelPrimaryKeyColumns) {
		fields = todosLabelAllColumns
	} else {
		fields = strmangle.SetComplement(
			todosLabelAllColumns,
			todosLabelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TodosLabelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTodosLabelsUpsert(t *testing.T) {
	t.Parallel()

	if len(todosLabelAllColumns) == len(todosLabelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTodosLabelUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TodosLabel{}
	if err = randomize.Struct(seed, &o, todosLabelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodosLabel: %s", err)
	}

	count, err := TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, todosLabelDBTypes, false, todosLabelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodosLabel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodosLabel: %s", err)
	}

	count, err = TodosLabels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
