// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsersBoards(t *testing.T) {
	t.Parallel()

	query := UsersBoards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsersBoardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersBoardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsersBoards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersBoardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersBoardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersBoardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsersBoardExists(ctx, tx, o.UserID, o.BoardID)
	if err != nil {
		t.Errorf("Unable to check if UsersBoard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsersBoardExists to return true, but got false.")
	}
}

func testUsersBoardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usersBoardFound, err := FindUsersBoard(ctx, tx, o.UserID, o.BoardID)
	if err != nil {
		t.Error(err)
	}

	if usersBoardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsersBoardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsersBoards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsersBoardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsersBoards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsersBoardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usersBoardOne := &UsersBoard{}
	usersBoardTwo := &UsersBoard{}
	if err = randomize.Struct(seed, usersBoardOne, usersBoardDBTypes, false, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}
	if err = randomize.Struct(seed, usersBoardTwo, usersBoardDBTypes, false, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersBoardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersBoardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersBoards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsersBoardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usersBoardOne := &UsersBoard{}
	usersBoardTwo := &UsersBoard{}
	if err = randomize.Struct(seed, usersBoardOne, usersBoardDBTypes, false, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}
	if err = randomize.Struct(seed, usersBoardTwo, usersBoardDBTypes, false, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersBoardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersBoardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usersBoardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func usersBoardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersBoard) error {
	*o = UsersBoard{}
	return nil
}

func testUsersBoardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsersBoard{}
	o := &UsersBoard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usersBoardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsersBoard object: %s", err)
	}

	AddUsersBoardHook(boil.BeforeInsertHook, usersBoardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usersBoardBeforeInsertHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.AfterInsertHook, usersBoardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usersBoardAfterInsertHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.AfterSelectHook, usersBoardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usersBoardAfterSelectHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.BeforeUpdateHook, usersBoardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usersBoardBeforeUpdateHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.AfterUpdateHook, usersBoardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usersBoardAfterUpdateHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.BeforeDeleteHook, usersBoardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usersBoardBeforeDeleteHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.AfterDeleteHook, usersBoardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usersBoardAfterDeleteHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.BeforeUpsertHook, usersBoardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usersBoardBeforeUpsertHooks = []UsersBoardHook{}

	AddUsersBoardHook(boil.AfterUpsertHook, usersBoardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usersBoardAfterUpsertHooks = []UsersBoardHook{}
}

func testUsersBoardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersBoardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usersBoardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersBoardToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsersBoard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usersBoardDBTypes, false, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsersBoardSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UsersBoard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsersBoardToOneBoardUsingBoard(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsersBoard
	var foreign Board

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usersBoardDBTypes, false, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, boardDBTypes, false, boardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Board struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BoardID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Board().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UsersBoardSlice{&local}
	if err = local.L.LoadBoard(ctx, tx, false, (*[]*UsersBoard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Board = nil
	if err = local.L.LoadBoard(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Board == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUsersBoardToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsersBoard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usersBoardDBTypes, false, strmangle.SetComplement(usersBoardPrimaryKeyColumns, usersBoardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsersBoards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UsersBoardExists(ctx, tx, a.UserID, a.BoardID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUsersBoardToOneSetOpBoardUsingBoard(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsersBoard
	var b, c Board

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usersBoardDBTypes, false, strmangle.SetComplement(usersBoardPrimaryKeyColumns, usersBoardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, boardDBTypes, false, strmangle.SetComplement(boardPrimaryKeyColumns, boardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Board{&b, &c} {
		err = a.SetBoard(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Board != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsersBoards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BoardID != x.ID {
			t.Error("foreign key was wrong value", a.BoardID)
		}

		if exists, err := UsersBoardExists(ctx, tx, a.UserID, a.BoardID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUsersBoardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersBoardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersBoardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersBoardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersBoards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usersBoardDBTypes = map[string]string{`UserID`: `int`, `BoardID`: `int`, `Role`: `tinyint`}
	_                 = bytes.MinRead
)

func testUsersBoardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usersBoardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usersBoardAllColumns) == len(usersBoardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsersBoardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usersBoardAllColumns) == len(usersBoardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersBoard{}
	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersBoardDBTypes, true, usersBoardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usersBoardAllColumns, usersBoardPrimaryKeyColumns) {
		fields = usersBoardAllColumns
	} else {
		fields = strmangle.SetComplement(
			usersBoardAllColumns,
			usersBoardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsersBoardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsersBoardsUpsert(t *testing.T) {
	t.Parallel()

	if len(usersBoardAllColumns) == len(usersBoardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUsersBoardUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsersBoard{}
	if err = randomize.Struct(seed, &o, usersBoardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersBoard: %s", err)
	}

	count, err := UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usersBoardDBTypes, false, usersBoardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersBoard struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersBoard: %s", err)
	}

	count, err = UsersBoards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
